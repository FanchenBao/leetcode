# from pudb import set_trace; set_trace()
from typing import List


class Solution1:
    def pacificAtlantic(self, matrix: List[List[int]]) -> List[List[int]]:
        """LeetCode 417

        This is apparently a terrible solution. Basically, we start at each
        corner, and run both horizontally and vertically to traverse through all
        cells. And for each cell, we also examine all four directions. After
        we run this, we will have covered all possibilities.

        O(8 * 4 * m * n), 1864 ms, 8% ranking.
        """
        if not matrix:
            return []
        m, n = len(matrix), len(matrix[0])
        dp = [[0] * n for _ in range(m)]
        res = []

        def evaluate(i, j):
            for di, dj in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
                ni, nj = i + di, j + dj
                if ni == m or nj == n:
                    dp[i][j] |= 1
                elif ni < 0 or nj < 0:
                    dp[i][j] |= 2
                elif matrix[ni][nj] <= matrix[i][j]:
                    dp[i][j] |= dp[ni][nj]

        # start bottom right
        for i in range(m - 1, -1, -1):
            for j in range(n - 1, -1, -1):
                evaluate(i, j)
        for j in range(n - 1, -1, -1):
            for i in range(m - 1, -1, -1):
                evaluate(i, j)
        # start bottom left
        for i in range(m - 1, -1, -1):
            for j in range(n):
                evaluate(i, j)
        for j in range(n):
            for i in range(m - 1, -1, -1):
                evaluate(i, j)
        # start up right
        for i in range(m):
            for j in range(n - 1, -1, -1):
                evaluate(i, j)
        for j in range(n - 1, -1, -1):
            for i in range(m):
                evaluate(i, j)
        # start up left
        for j in range(n):
            for i in range(m):
                evaluate(i, j)
        for i in range(m):
            for j in range(n):
                evaluate(i, j)
                if dp[i][j] == 3:
                    res.append([i, j])
        return res


class Solution2:
    def pacificAtlantic(self, matrix: List[List[int]]) -> List[List[int]]:
        """This is my implementation of the official solution. Much much faster. We run from the
        ocean inward, because that way each cell we traverse has a certainty
        regarding its relationship with the ocean. Since there is no ambiguity,
        we can be certain that a visited cell does not need to be visited again.

        We use two dp matrices to facilitate two runs, one from the Pacific, the
        other the Atlantic.

        O(MN), 312 ms, 39% ranking.
        """
        if not matrix:
            return []
        m, n = len(matrix), len(matrix[0])

        def dfs(i, j, flag, dp):
            """flag determines which ocean we are concerned with. flag = 2 if
            the traversal originates from the Pacific. flag = 1, originates from
            the Atlantic.
            """
            togo = []
            for di, dj in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
                ni, nj = i + di, j + dj
                if 0 <= ni < m and 0 <= nj < n and matrix[ni][nj] >= matrix[i][j]:
                    # go to the next cell only if it has not been visited from
                    # the perspective of the current ocean
                    if dp[ni][nj] != flag:
                        togo.append((ni, nj))
                    dp[ni][nj] |= dp[i][j]
            for ni, nj in togo:
                dfs(ni, nj, flag, dp)

        # fill dp for Pacific. We set default value on the first row and first
        # column, then traverse from each default cell.
        dp_pac = [[0] * n for _ in range(m)]
        for j in range(n):
            dp_pac[0][j] |= 2
            dfs(0, j, 2, dp_pac)
        for i in range(m):
            dp_pac[i][0] |= 2
            dfs(i, 0, 2, dp_pac)
        # fill dp for Atlantic. We set default value on the last row and last
        # column, then traverse from each default cell.
        dp_atl = [[0] * n for _ in range(m)]
        for j in range(n):
            dp_atl[m - 1][j] |= 1
            dfs(m - 1, j, 1, dp_atl)
        for i in range(m):
            dp_atl[i][n - 1] |= 1
            dfs(i, n - 1, 1, dp_atl)
        return [[i, j] for i in range(m) for j in range(n) if dp_pac[i][j] | dp_atl[i][j] == 3]


class Solution3:
    def pacificAtlantic(self, matrix: List[List[int]]) -> List[List[int]]:
        """This is the actual official solution using DFS. Very very good one

        So elegant a solution!

        O(MN), 276 ms, 84% ranking.
        """
        if not matrix:
            return []
        m, n = len(matrix), len(matrix[0])
        p_reachable, a_reachable = set(), set()

        def dfs(i, j, reachable):
            reachable.add((i, j))
            for di, dj in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
                ni, nj = i + di, j + dj
                if 0 <= ni < m and 0 <= nj < n and (ni, nj) not in reachable and matrix[ni][nj] >= matrix[i][j]:
                    dfs(ni, nj, reachable)

        for i in range(m):
            dfs(i, 0, p_reachable)
            dfs(i, n - 1, a_reachable)
        for j in range(n):
            dfs(0, j, p_reachable)
            dfs(m - 1, j, a_reachable)

        return list(p_reachable.intersection(a_reachable))


sol = Solution3()
tests = [
    ([[1, 2, 2, 3, 5], [3, 2, 3, 4, 4], [2, 4, 5, 3, 1], [6, 7, 1, 4, 5], [5, 1, 1, 2, 4]], [[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]]),
    ([[1, 2, 3, 4]], [[0, 0], [0, 1], [0, 2], [0, 3]]),
    ([[1], [2], [3], [4]], [[0, 0], [1, 0], [2, 0], [3, 0]]),
    ([], []),
    ([[1, 2, 3], [8, 9, 4], [7, 6, 5]], [[0, 2], [1, 0], [1, 1], [1, 2], [2, 0], [2, 1], [2, 2]]),
    ([[9, 10, 14, 9, 2, 6, 16], [0, 0, 4, 5, 16, 16, 15], [10, 8, 16, 10, 12, 8, 11], [3, 13, 15, 0, 19, 16, 5], [13, 17, 1, 12, 11, 8, 14], [14, 9, 11, 10, 5, 19, 11], [15, 3, 14, 3, 9, 11, 5], [9, 17, 5, 15, 5, 15, 7], [12, 11, 10, 0, 9, 14, 19], [9, 1, 4, 5, 8, 18, 18], [1, 4, 17, 16, 5, 12, 18], [18, 2, 0, 0, 2, 11, 5], [1, 15, 8, 18, 13, 15, 13], [11, 14, 4, 13, 3, 1, 1], [4, 2, 11, 19, 17, 8, 11], [4, 11, 10, 0, 1, 18, 11], [11, 7, 14, 4, 7, 8, 9], [12, 0, 0, 3, 6, 2, 12], [0, 16, 3, 3, 5, 6, 6], [6, 11, 17, 12, 18, 5, 15], [16, 14, 8, 4, 10, 16, 6], [9, 7, 2, 13, 5, 5, 5], [14, 17, 19, 4, 7, 2, 5], [11, 16, 18, 14, 8, 10, 12], [5, 11, 10, 17, 2, 2, 13], [7, 6, 12, 3, 5, 3, 12], [12, 10, 0, 19, 3, 15, 12], [13, 2, 12, 1, 1, 15, 19], [11, 15, 10, 8, 14, 19, 8], [16, 2, 2, 16, 5, 15, 16], [9, 8, 2, 17, 15, 14, 16], [17, 2, 17, 17, 0, 6, 3], [3, 4, 13, 9, 1, 4, 0], [1, 3, 13, 10, 14, 9, 4]], [[0, 6], [1, 4], [1, 5], [3, 4], [22, 2], [23, 2], [30, 3], [31, 0], [31, 2], [31, 3], [32, 0], [32, 1], [32, 2], [33, 0], [33, 1], [33, 2]]),
    ([[15, 8, 1, 19, 4, 19, 10, 0, 4, 4, 19, 9, 12, 0, 1, 12, 15, 14, 5, 2, 4, 12, 6, 18, 8, 12, 15, 12, 15, 13, 0, 18, 9, 19, 17], [2, 0, 1, 19, 14, 9, 0, 16, 10, 9, 10, 10, 7, 17, 18, 15, 6, 10, 12, 16, 11, 7, 6, 9, 19, 16, 16, 9, 9, 1, 9, 11, 8, 16, 18], [0, 15, 12, 1, 19, 8, 19, 12, 19, 7, 3, 3, 9, 15, 13, 17, 4, 9, 10, 2, 10, 4, 3, 15, 12, 2, 9, 18, 13, 5, 11, 12, 15, 16, 0], [1, 8, 1, 12, 8, 13, 11, 15, 10, 13, 16, 13, 5, 1, 17, 13, 16, 15, 15, 13, 0, 13, 1, 2, 15, 0, 1, 9, 10, 3, 8, 2, 19, 10, 10], [10, 0, 7, 15, 13, 14, 8, 7, 18, 2, 7, 13, 15, 14, 12, 7, 12, 13, 13, 3, 7, 8, 0, 19, 14, 16, 13, 3, 10, 13, 19, 15, 12, 6, 18], [7, 6, 0, 14, 18, 12, 6, 11, 0, 13, 13, 13, 17, 10, 4, 16, 19, 17, 16, 5, 8, 6, 2, 19, 17, 19, 8, 5, 3, 7, 9, 13, 12, 6, 11], [7, 14, 11, 3, 0, 15, 19, 16, 18, 17, 14, 7, 8, 6, 4, 7, 11, 16, 14, 0, 5, 14, 6, 7, 13, 15, 17, 16, 8, 13, 9, 12, 11, 19, 16], [3, 15, 8, 12, 1, 6, 14, 0, 17, 7, 14, 15, 18, 18, 19, 16, 14, 18, 7, 15, 2, 3, 3, 8, 5, 0, 2, 18, 19, 2, 17, 13, 12, 11, 2], [9, 4, 7, 10, 8, 6, 1, 9, 11, 9, 14, 4, 14, 1, 6, 15, 5, 6, 19, 19, 10, 15, 16, 8, 18, 6, 0, 7, 8, 0, 1, 1, 2, 6, 0], [7, 14, 5, 5, 10, 16, 19, 6, 9, 19, 11, 6, 7, 17, 3, 5, 11, 13, 10, 5, 14, 4, 4, 12, 14, 12, 5, 7, 17, 6, 6, 8, 14, 18, 12], [19, 14, 1, 5, 12, 16, 19, 9, 5, 9, 15, 4, 17, 6, 8, 1, 2, 4, 18, 15, 0, 14, 13, 5, 16, 7, 14, 17, 4, 19, 17, 18, 0, 12, 3], [14, 2, 2, 14, 15, 11, 19, 14, 14, 7, 9, 3, 14, 7, 14, 1, 11, 18, 19, 8, 15, 1, 2, 18, 11, 5, 17, 10, 19, 11, 16, 2, 15, 18, 2], [9, 9, 13, 1, 15, 12, 3, 0, 3, 12, 1, 9, 0, 13, 11, 4, 15, 11, 8, 19, 17, 11, 9, 14, 13, 11, 5, 2, 13, 11, 6, 9, 6, 11, 2], [1, 2, 15, 1, 7, 18, 3, 0, 16, 13, 17, 8, 14, 4, 12, 1, 4, 12, 1, 17, 16, 14, 9, 5, 19, 17, 7, 11, 12, 19, 14, 3, 5, 14, 14], [0, 9, 2, 15, 2, 15, 1, 2, 3, 10, 2, 16, 19, 19, 11, 14, 1, 0, 1, 15, 19, 14, 18, 18, 17, 17, 7, 0, 3, 0, 12, 14, 14, 0, 13], [4, 9, 7, 15, 5, 1, 17, 9, 14, 10, 19, 9, 2, 13, 1, 6, 12, 0, 11, 7, 13, 8, 4, 2, 6, 19, 10, 4, 19, 13, 10, 13, 18, 17, 6], [0, 13, 18, 2, 13, 10, 11, 9, 7, 0, 12, 13, 14, 8, 11, 10, 1, 0, 4, 3, 4, 5, 13, 16, 13, 15, 2, 11, 9, 1, 17, 10, 12, 18, 14], [11, 10, 8, 13, 12, 8, 13, 4, 14, 19, 11, 13, 0, 16, 6, 1, 16, 9, 19, 16, 13, 4, 17, 5, 1, 14, 5, 17, 19, 7, 18, 0, 6, 4, 16], [0, 16, 5, 4, 0, 17, 15, 9, 17, 12, 3, 19, 7, 0, 2, 10, 10, 13, 4, 11, 14, 18, 18, 14, 6, 11, 12, 6, 14, 17, 8, 2, 5, 5, 14], [6, 11, 14, 17, 11, 11, 18, 7, 4, 17, 19, 13, 8, 11, 9, 18, 17, 17, 16, 15, 0, 15, 0, 11, 13, 11, 12, 9, 18, 4, 16, 7, 2, 19, 8], [13, 11, 12, 19, 0, 1, 1, 17, 4, 11, 15, 3, 14, 8, 10, 1, 15, 19, 8, 10, 14, 8, 2, 13, 15, 12, 4, 8, 3, 1, 18, 1, 4, 14, 7], [2, 17, 9, 5, 17, 18, 17, 7, 9, 0, 16, 5, 17, 0, 15, 10, 19, 3, 14, 13, 6, 2, 0, 17, 1, 7, 18, 17, 7, 12, 4, 17, 15, 11, 12], [15, 4, 7, 8, 15, 19, 19, 16, 18, 2, 5, 17, 13, 13, 11, 17, 18, 0, 14, 6, 11, 11, 10, 2, 16, 15, 3, 17, 13, 10, 9, 7, 5, 18, 8], [10, 5, 19, 12, 5, 4, 14, 2, 19, 15, 15, 13, 1, 18, 19, 7, 14, 19, 3, 10, 0, 7, 0, 15, 9, 7, 0, 16, 6, 12, 7, 15, 17, 19, 7], [2, 14, 13, 18, 4, 14, 14, 1, 14, 15, 13, 7, 14, 4, 17, 0, 16, 13, 18, 0, 10, 5, 4, 8, 8, 0, 0, 11, 10, 4, 5, 2, 10, 0, 11], [14, 13, 18, 18, 16, 14, 6, 19, 3, 1, 0, 3, 14, 19, 5, 1, 13, 3, 19, 7, 6, 13, 6, 9, 17, 3, 2, 14, 1, 4, 14, 15, 10, 3, 16], [10, 11, 16, 15, 0, 12, 6, 2, 19, 14, 9, 15, 8, 8, 3, 4, 5, 7, 14, 7, 19, 10, 12, 1, 2, 7, 4, 5, 14, 9, 13, 10, 10, 14, 5], [2, 16, 2, 16, 3, 9, 3, 3, 11, 3, 5, 0, 5, 1, 17, 16, 0, 10, 2, 8, 12, 14, 0, 5, 16, 10, 16, 15, 9, 11, 1, 1, 18, 19, 1], [3, 13, 0, 9, 12, 10, 5, 12, 12, 4, 19, 18, 10, 0, 17, 5, 11, 3, 13, 16, 3, 0, 0, 15, 5, 10, 4, 17, 15, 11, 8, 17, 8, 9, 4], [8, 17, 16, 12, 16, 5, 11, 0, 10, 5, 12, 2, 18, 6, 17, 16, 15, 8, 12, 4, 18, 3, 3, 14, 13, 12, 3, 5, 1, 9, 12, 6, 5, 18, 0], [6, 2, 17, 16, 4, 4, 13, 3, 15, 14, 7, 4, 14, 2, 14, 13, 6, 13, 2, 18, 12, 17, 19, 15, 8, 10, 0, 8, 1, 7, 10, 11, 12, 14, 11], [17, 17, 15, 6, 2, 18, 5, 8, 19, 11, 8, 2, 10, 9, 15, 16, 17, 14, 10, 14, 1, 19, 12, 7, 18, 2, 6, 14, 8, 11, 8, 19, 12, 5, 18], [11, 5, 9, 19, 16, 18, 16, 18, 11, 8, 3, 13, 11, 6, 5, 19, 7, 1, 8, 3, 16, 15, 16, 3, 14, 8, 17, 15, 18, 11, 4, 10, 8, 7, 13], [0, 7, 13, 12, 7, 10, 19, 7, 3, 14, 7, 8, 0, 10, 10, 12, 18, 6, 1, 4, 17, 2, 14, 11, 17, 6, 16, 9, 13, 7, 8, 2, 7, 9, 16], [12, 3, 19, 2, 8, 1, 17, 18, 8, 6, 16, 1, 15, 2, 18, 2, 4, 4, 5, 3, 9, 4, 5, 9, 0, 18, 18, 13, 8, 17, 14, 15, 19, 2, 13], [9, 19, 6, 4, 10, 0, 7, 13, 13, 1, 12, 6, 0, 19, 8, 7, 2, 15, 16, 6, 13, 18, 17, 10, 18, 7, 10, 19, 14, 10, 16, 5, 13, 9, 7], [7, 2, 0, 1, 13, 7, 6, 9, 3, 1, 18, 6, 2, 12, 12, 3, 0, 19, 14, 19, 10, 18, 11, 2, 18, 9, 15, 10, 7, 6, 8, 4, 3, 16, 9], [15, 11, 11, 10, 0, 6, 3, 15, 13, 16, 8, 14, 8, 6, 1, 16, 15, 15, 6, 8, 12, 13, 12, 13, 3, 2, 11, 13, 13, 7, 7, 10, 2, 8, 7], [8, 3, 18, 12, 10, 5, 5, 11, 7, 2, 17, 10, 9, 13, 17, 13, 10, 2, 15, 11, 1, 12, 15, 1, 4, 10, 15, 18, 0, 17, 0, 18, 6, 11, 11], [3, 6, 3, 3, 9, 13, 10, 14, 14, 1, 10, 15, 19, 12, 18, 0, 7, 13, 19, 18, 19, 17, 10, 11, 3, 18, 16, 2, 6, 18, 8, 17, 3, 11, 18], [19, 1, 10, 19, 10, 16, 6, 16, 18, 18, 16, 0, 8, 2, 17, 6, 14, 10, 0, 18, 11, 5, 8, 15, 11, 7, 2, 2, 8, 2, 14, 6, 4, 15, 11], [3, 12, 6, 19, 9, 14, 15, 8, 6, 0, 13, 4, 1, 16, 5, 16, 6, 19, 12, 19, 7, 2, 6, 0, 1, 9, 15, 18, 15, 0, 4, 13, 0, 11, 19], [9, 17, 14, 17, 1, 2, 18, 0, 6, 2, 8, 1, 19, 6, 7, 0, 3, 3, 16, 19, 1, 4, 19, 14, 11, 18, 16, 12, 18, 15, 2, 19, 18, 2, 11], [10, 15, 2, 12, 15, 12, 7, 13, 1, 19, 13, 0, 13, 2, 19, 1, 5, 18, 0, 5, 6, 18, 14, 12, 10, 19, 12, 10, 2, 2, 2, 13, 14, 6, 7], [9, 19, 17, 3, 0, 10, 18, 17, 9, 15, 14, 12, 4, 1, 1, 1, 9, 9, 18, 19, 3, 10, 0, 19, 16, 8, 11, 12, 3, 2, 6, 12, 17, 10, 17], [18, 16, 15, 6, 16, 2, 14, 19, 1, 3, 18, 18, 14, 14, 6, 8, 5, 2, 9, 0, 3, 13, 9, 4, 13, 14, 9, 15, 0, 4, 18, 1, 9, 11, 13], [1, 19, 11, 14, 12, 10, 11, 8, 15, 9, 17, 5, 19, 17, 5, 3, 1, 2, 7, 9, 10, 4, 1, 0, 5, 2, 2, 17, 5, 11, 15, 0, 9, 9, 12], [15, 9, 7, 3, 1, 19, 16, 16, 18, 16, 14, 15, 19, 10, 18, 16, 12, 15, 9, 18, 7, 12, 19, 0, 4, 7, 16, 12, 19, 15, 16, 2, 17, 15, 5], [17, 18, 6, 12, 13, 1, 2, 9, 1, 6, 18, 19, 11, 6, 19, 12, 19, 9, 19, 19, 5, 4, 17, 9, 19, 10, 11, 14, 3, 16, 9, 7, 14, 2, 7], [9, 10, 2, 5, 8, 6, 7, 3, 11, 12, 19, 12, 1, 4, 14, 16, 14, 12, 15, 11, 12, 0, 14, 9, 4, 13, 16, 19, 13, 5, 18, 8, 10, 17, 9], [2, 17, 11, 11, 15, 12, 8, 3, 13, 13, 18, 11, 13, 11, 3, 11, 8, 11, 11, 15, 4, 5, 11, 9, 6, 15, 3, 17, 3, 9, 9, 10, 4, 15, 12], [14, 7, 11, 1, 10, 11, 7, 1, 16, 12, 11, 6, 6, 12, 14, 3, 4, 6, 19, 1, 7, 2, 10, 8, 17, 9, 16, 7, 1, 3, 11, 17, 2, 11, 0], [1, 9, 8, 12, 1, 16, 19, 6, 19, 2, 0, 3, 5, 14, 14, 8, 3, 7, 5, 17, 11, 10, 15, 3, 5, 2, 12, 0, 5, 14, 15, 7, 10, 14, 12], [11, 13, 16, 15, 4, 15, 10, 11, 0, 12, 4, 3, 17, 5, 19, 6, 13, 17, 17, 3, 0, 4, 17, 19, 14, 17, 0, 19, 0, 2, 14, 1, 12, 18, 11], [12, 13, 15, 9, 18, 12, 13, 2, 3, 18, 16, 16, 14, 0, 10, 5, 6, 14, 9, 18, 15, 13, 12, 8, 3, 10, 16, 18, 6, 3, 19, 17, 14, 0, 14], [13, 0, 0, 0, 6, 12, 11, 2, 15, 7, 12, 1, 7, 12, 12, 7, 6, 12, 2, 19, 11, 19, 2, 17, 4, 0, 0, 9, 4, 9, 14, 15, 9, 1, 15], [12, 5, 19, 7, 5, 14, 4, 8, 7, 7, 4, 19, 10, 11, 6, 19, 2, 5, 11, 8, 19, 5, 13, 16, 16, 17, 5, 15, 16, 9, 2, 9, 15, 14, 0], [3, 12, 6, 14, 1, 4, 4, 16, 19, 14, 18, 18, 3, 9, 13, 10, 3, 0, 2, 13, 6, 16, 15, 13, 10, 13, 4, 14, 14, 2, 11, 11, 19, 19, 4], [12, 13, 3, 11, 15, 7, 3, 3, 4, 15, 15, 19, 14, 17, 14, 9, 3, 19, 16, 12, 15, 17, 8, 4, 14, 10, 12, 16, 16, 19, 7, 6, 7, 2, 5], [11, 4, 8, 6, 11, 3, 5, 8, 0, 5, 8, 7, 16, 15, 17, 13, 8, 17, 18, 7, 16, 5, 2, 15, 6, 11, 3, 10, 18, 6, 8, 6, 8, 9, 19], [1, 0, 19, 8, 14, 8, 8, 13, 6, 17, 18, 6, 14, 12, 1, 2, 4, 8, 19, 5, 16, 12, 12, 10, 18, 18, 13, 13, 17, 3, 4, 9, 2, 16, 0], [12, 11, 6, 8, 15, 7, 6, 7, 5, 0, 7, 13, 17, 17, 4, 9, 0, 10, 3, 14, 17, 13, 0, 13, 19, 3, 8, 18, 5, 4, 13, 3, 6, 0, 11], [3, 8, 7, 9, 2, 19, 3, 18, 6, 7, 5, 16, 10, 18, 2, 3, 19, 4, 17, 6, 13, 5, 15, 10, 4, 6, 7, 4, 4, 4, 12, 2, 2, 6, 4], [16, 12, 15, 14, 17, 17, 19, 4, 12, 3, 15, 4, 3, 1, 3, 13, 10, 10, 8, 7, 18, 12, 3, 3, 6, 14, 5, 12, 16, 17, 2, 8, 9, 5, 9], [10, 3, 8, 2, 11, 8, 3, 19, 7, 15, 18, 1, 10, 11, 7, 18, 8, 11, 3, 5, 13, 9, 5, 10, 4, 16, 7, 16, 6, 6, 11, 1, 7, 16, 15], [8, 0, 8, 18, 18, 8, 16, 8, 11, 14, 0, 16, 13, 13, 18, 13, 0, 11, 15, 18, 13, 7, 3, 18, 16, 9, 6, 12, 16, 13, 10, 4, 17, 13, 16], [1, 9, 3, 6, 8, 5, 10, 19, 14, 9, 4, 19, 9, 19, 3, 15, 8, 9, 10, 5, 13, 1, 16, 0, 4, 5, 15, 18, 10, 12, 0, 8, 19, 15, 3], [4, 10, 19, 15, 19, 0, 4, 14, 9, 9, 4, 16, 4, 19, 14, 9, 4, 15, 0, 16, 2, 10, 12, 9, 2, 1, 10, 15, 12, 9, 13, 5, 7, 10, 9], [16, 3, 11, 16, 15, 8, 16, 5, 18, 8, 0, 12, 11, 3, 10, 13, 14, 19, 14, 17, 17, 6, 8, 3, 5, 12, 18, 1, 1, 14, 16, 10, 1, 17, 18], [0, 6, 17, 1, 7, 13, 2, 18, 12, 9, 12, 4, 12, 19, 7, 5, 17, 13, 17, 17, 15, 3, 8, 7, 17, 18, 14, 12, 3, 18, 0, 2, 1, 4, 11], [18, 9, 17, 9, 2, 1, 2, 7, 2, 9, 18, 18, 6, 3, 13, 8, 2, 14, 3, 17, 19, 17, 13, 18, 6, 12, 3, 8, 13, 17, 16, 7, 9, 1, 7], [7, 15, 0, 16, 1, 17, 19, 2, 11, 14, 16, 11, 10, 0, 11, 3, 5, 14, 19, 10, 15, 5, 5, 1, 1, 2, 2, 11, 9, 7, 9, 5, 11, 2, 15], [5, 14, 3, 19, 18, 4, 16, 6, 1, 0, 11, 7, 17, 9, 13, 17, 8, 16, 11, 17, 11, 11, 10, 8, 5, 16, 4, 10, 1, 1, 13, 16, 9, 1, 5], [9, 3, 4, 8, 19, 11, 13, 8, 10, 19, 5, 7, 10, 4, 6, 10, 6, 4, 6, 3, 1, 2, 9, 16, 12, 14, 4, 3, 2, 10, 3, 7, 9, 10, 7], [11, 18, 18, 18, 5, 16, 16, 2, 4, 18, 5, 0, 4, 10, 10, 14, 9, 7, 13, 15, 3, 7, 4, 18, 17, 6, 9, 3, 12, 18, 0, 9, 8, 12, 6], [7, 18, 9, 0, 2, 17, 18, 0, 11, 7, 18, 12, 7, 7, 5, 14, 6, 9, 14, 7, 18, 14, 7, 17, 9, 14, 1, 19, 18, 4, 19, 7, 3, 9, 4], [4, 15, 17, 5, 1, 15, 16, 13, 15, 5, 9, 19, 3, 8, 10, 6, 0, 16, 11, 5, 4, 15, 16, 2, 5, 6, 2, 1, 16, 6, 17, 6, 6, 19, 1], [19, 8, 19, 19, 1, 1, 8, 12, 6, 6, 14, 5, 7, 17, 8, 14, 8, 19, 2, 13, 9, 5, 17, 14, 2, 2, 1, 2, 19, 16, 0, 12, 1, 0, 11], [4, 8, 16, 12, 11, 5, 16, 15, 0, 13, 16, 6, 10, 17, 14, 13, 11, 14, 3, 8, 1, 8, 1, 4, 15, 2, 17, 8, 7, 13, 10, 0, 7, 19, 18], [9, 14, 0, 16, 8, 13, 0, 12, 6, 12, 7, 8, 14, 16, 4, 19, 9, 18, 1, 0, 6, 18, 1, 13, 1, 5, 1, 17, 10, 8, 18, 13, 3, 2, 16], [19, 4, 18, 7, 1, 8, 3, 10, 2, 17, 17, 0, 14, 9, 10, 0, 16, 3, 1, 18, 0, 17, 14, 9, 15, 4, 14, 8, 12, 6, 3, 7, 5, 1, 13], [11, 7, 12, 0, 10, 7, 19, 10, 6, 19, 12, 8, 6, 16, 12, 9, 6, 6, 14, 7, 15, 13, 6, 15, 2, 19, 11, 7, 11, 13, 19, 11, 4, 3, 18], [18, 4, 16, 11, 15, 18, 5, 14, 4, 1, 2, 5, 6, 17, 3, 14, 3, 13, 2, 6, 14, 0, 11, 12, 9, 0, 16, 11, 0, 6, 3, 2, 17, 19, 13], [18, 16, 19, 14, 16, 7, 7, 7, 9, 12, 10, 0, 15, 15, 6, 4, 17, 2, 6, 14, 14, 18, 16, 14, 16, 4, 4, 5, 1, 18, 11, 10, 8, 17, 6], [5, 0, 16, 4, 6, 17, 11, 19, 8, 0, 6, 3, 8, 9, 8, 4, 18, 6, 8, 5, 18, 7, 19, 3, 8, 9, 12, 5, 2, 8, 2, 15, 19, 7, 12]], [[0, 33], [0, 34], [1, 33], [1, 34], [2, 33], [3, 32], [82, 0], [83, 0], [84, 0]]),
]

for i, (matrix, ans) in enumerate(tests):
    res = sol.pacificAtlantic(matrix)
    if res == ans:
        print(f'Test {i}: PASS')
    else:
        print(f'Test {i}; Fail. Ans: {ans}, Res: {res}')
