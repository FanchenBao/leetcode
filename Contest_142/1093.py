"""
Date: 06/22/2019

A fairly straightfoward problem, but I read the question wrong initially, which caused me quite a lot of time solving this problem. Computing the min, max, mean, and mode was easy. The only thing that required some thought was the median, as the total number of numbers being even or odd resulted in different algorithms.
"""


class Solution:
    def sampleStats(self, count):
        res = [0] * 5
        foundMin = False
        SUM = 0
        totalNum = 0
        maxCount = 0
        for i, c in enumerate(count):
            if c != 0:
                if not foundMin:
                    res[0] = float(i)
                    foundMin = True
                res[1] = float(i)
                SUM += i * c
                totalNum += c
                if c > maxCount:
                    res[4] = float(i)
                    maxCount = c
        res[2] = SUM / totalNum

        if totalNum % 2:  # odd number of total numbers
            target = (totalNum + 1) // 2
            countFromBegin = 0
            for i, c in enumerate(count):
                countFromBegin += c
                if countFromBegin >= target:
                    res[3] = float(i)
                    break

        else:  # even number
            left = totalNum // 2
            right = left + 1
            countFromBegin = 0
            leftDone = False
            for i, c in enumerate(count):
                countFromBegin += c
                if countFromBegin >= left and not leftDone:
                    res[3] = i
                    leftDone = True
                if countFromBegin >= right:
                    res[3] += i
                    res[3] /= 2
                    break

        return res


sol = Solution()
print(
    sol.sampleStats(
        [
            0,
            4,
            3,
            2,
            2,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ]
    )
)
