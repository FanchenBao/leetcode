# from pudb import set_trace; set_trace()
from typing import List
import math


class Solution1:
    def __init__(self):
        self.primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499]

    def distinctPrimeFactors(self, nums: List[int]) -> int:
        """I don't like this. I have to obtain a list of primes smaller than 500

        I thought I don't need to do that, but then the issue arises when a
        number is, say, 2 x 401. I have to include all the primes below 500 to
        handle this situation.

        O(NM), 599 ms, faster than 44.71%
        """
        pf = set()
        for n in nums:
            is_prime = True
            for p in self.primes:
                if p > n:
                    break
                if n % p == 0:
                    pf.add(p)
                    is_prime = False
            if is_prime:
                pf.add(n)
        return len(pf)


class Solution2:
    def distinct_prime_factors(self, n: int) -> int:
        pf = set()
        if n % 2 == 0:
            pf.add(2)
        while n > 1 and n % 2 == 0:
            n //= 2
        p = 3
        while n > 1:
            if n % p == 0:
                pf.add(p)
            while n > 1 and n % p == 0:
                n //= p
            p += 2
        return pf

    def distinctPrimeFactors(self, nums: List[int]) -> int:
        """Naively finding all the prime factors
        
        4786 ms, faster than 5.01%
        """
        pf = set()
        for n in nums:
            pf = pf.union(self.distinct_prime_factors(n))
        return len(pf)


class Solution3:
    def __init__(self):
        self.primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]

    def distinct_prime_factors(self, n: int) -> int:
        pf = set()
        for p in self.primes:
            if p > n:
                break
            if n % p == 0:
                pf.add(p)
            while n > 1 and n % p == 0:
                n //= p
        if n != 1:
            pf.add(n)  # handle large prime factor
        return pf

    def distinctPrimeFactors(self, nums: List[int]) -> int:
        """Keep taking away prime factors. The last one standing must also be a
        prime. That's how we resolve the given number contains big prime factor

        662 ms, faster than 43.13%
        """
        pf = set()
        for n in nums:
            pf = pf.union(self.distinct_prime_factors(n))
        return len(pf)


sol = Solution3()
tests = [
    ([2,4,3,7,10,6], 4),
    ([2,4,8,16], 1),
    ([848,254,814,93,191,523,29,553,616,659,386,131,224,717,813,536,29,717,562,44,430,119,673,85,948,733,461,512,487,803,684,475,152,432,512,606,768,922,796,745,941,470,102,14,277,215,973,443,225,876,901,456,731,556,626,482,468,301,844,58,915,859,413,687,159,162,427,573,678,848,919,734,60,622,376,248,792,390,37,894,655,230,448,673,449,219,341,483,877,350,212,531,8,30,987,759,656,979,578,836,826,815,261,770,226,984,381,49,712,187,143,800,392,62,382,940,376,764,802,34,92,655,768,154,959,231,904,108,280,515,173,662,515,380,265,510,118,902,244,621,908,605,853,807,594,198,685,640,572,248,730,57,610,68,631,561,94,501,807,363,661,546,374,119,341,844,436,867,244,159,309,265,892,175,709,883,445,970,618,814,835,596,859,225,297,710,714,929,225,572,649,503,729,126,399,389,238,716,494,849,690,48,626,573,965,759,605,912,346,129,882,148,984,205,532,888,576,351,61,726,895,472,352,923,172,772,660,505,556,844,4,659,151,890,215,138,892,964,96,774,624,795,832,387,753,402,917,347,970,443,848,979,938,586,1000,835,816,256,507,529,864,631,687,90,7,843,773,652,956,546,91,534,544,436,985,320,818,558,812,276,763,706,651,792,136,708,797,574,272,289,829,284,75,81,415,861,659,653,510,516,776,399,178,128,712,455,466,254,768,205,759,588,770,673,586,941,768,355,315,350,930,78,846,315,625,997,255,443,439,179,496,466,689,558,527,222,796,211,508,754,575,203,739,584,269,987,401,549,255,63,474,926,545,497,985,494,977,818,380,481,130,591,219,487,381,57,596,806,335,859,543,864,498,428,257,674,278,952,941,881,826,24,552,855,841,523,149,943,460,117,82,46,659,163,221,305,186,160,498,338,669,461,714,189,657,331,523,203,12,557,837,56,396,378,467,413,996,345,118,988,592,269,850,451,998,413,671,58,106,753,884,129,725,373,387,324,399,528,872,722,965,978,491,277,754,584,812,913,977,454,212,451,259,571,581,491,735,568,500,437,784,262,511,935,334,580,834,52,940,446,695,610,729,483,539,157,492,569,593,447,45,785,804,709,779,482,908,466,401,508,901,126,978,520,873,469,230,115,511,181,676,860,522,390,840,681,231,755,687,460,933,405,61,348,224,877,688,836,373,293,83,957,437,880,993,414,37,419,51,91,15,60,794,932,617,939,987,723,844,565,410,785,891,791,921,329,283,663,417,430,871,433,63,757,968,973,962,759,49,857,343,301,252,191,587,388,113,714,309,306,237,430,103,957,51,169,486,594,27,364,824,552,975,238,402,617,387,112,150,483,30,434,480,100,939,246,401,692,39,233,986,755,817,828,448,300,606,202,202,722,973,780,405,308,679,413,588,190,139,655,319,81,11,560,152,586,644,760,750,337,466,596,976,553,882,543,668,245,847,603,57,714,774,319,348,68,107,54,480,662,231,947,54,738,975,105,961,555,964,948,76,367,873,484,689,337,899,125,824,157,553,513,112,798,360,113,655,74,414,789,667,204,186,394,296,196,341,427,605,980,564,153,999,234,372,141,717,318,185,899,725,939,987,842,460,62,433,445,657,884,607,273,919,872,754,191,552,925,824,281,933,876,265,357,11,730,811,778,519,128,805,859,638,365,704,302,627,614,680,996,115,866,128,956,396,229,161,768,396,110,523,593,378,304,247,244,700,620,105,482,837,250,598,555,245,998,979,435,321,511,923,947,827,689,281,325,867,336,399,977,527,304,910,647,230,518,489,432,959,567,641,986,141,565,322,760,970,211,611,274,389,131,555,656,864,114,742,147,818,754,674,613,678,665,487,780,121,995,273,103,922,401,981,190,71,253,301,253,667,888,347,943,793,944,999,446,50,541,736,301,435,584,716,942,788,391,592,409,353,816,96,330,726,772,867,377,347,444,755,931,477,801,808,420,424,471,584,891,115,805,499,910,75,394,878,518,960,887,732,193,45,58,911,611,793,376,586,99,153,814,507,372,411,461,682,312,614,131,608,295,780,748,43,864,64,560,525,990,666,729,813,312,225,407,96,632,780,468,480,227,751,168,556,714,600,380,743,32,948,813,364,855,219,701,380,273,930,745,812,772,339,808,581,997,879,914,814,485,345,434,752,22,445,264,931,115,802,593,170,497,709,345,114,574,133,127,218,788,501,282,334,83,783,250,666,795,727,83,906,355,404,220,838,742,188,348,657,135,380,795,294,449,817,536,850,978,809,224,422,260,150,5,113,341,910,367,976,565,193,587,472,734,961,757,302,108,245,537,887,108,218,228,569,936,854,464,257,352,381,470,840,254,293,266,167,732,110,178,576,534,807,57,884,101,222,202,589,119,401,568,825,833,905,745,919,756,357,981,919,368,395,299,861,346,507,219,15,820,383,797,860,745,447,733,770,553,291,669,373,960,623,705,801,961,563,455,11,67,855,860,303,812,971,510,252,58,376,388,881,792,947,145,540,98,182,435,444,856,741,222,581,959,328,694,217,938,577,528,853,843,267,465,189,871,53,282,307,605,752,35,463,854,605,894,997,744,836,441,20,967,402,399,774,624,576,601,849,187,716,680,325,326,277,895,828,737,364,75,783,998,606,102,858,960,726,487,289,538,528,156,521,614,458,693,773,130,65,161,303,686,509,165,855,216,882,763,455,724,70,404,192,869,974,720,908,11,788,313,714,269,398,282,632,424,820,370,861,144,567,298,37,968,370,921,718,557,547,386,838,557,687,822,675,983,609,163,276,149,607,38,858,992,519,482,981,177,108,812,437,210,876,777,21,860,640,230,80,140,313,835,161,50,892,872,593,835,535,218,786,81,616,706,137,168,396,910,129,375,427,325,627,446,511,788,786,186,364,822,532,380,745,755,258,237,152,773,127,270,23,340,365,937,12,299,698,510,26,189,728,979,200,769,359,963,168,738,510,647,777,461,13,600,250,587,819,730,357,766,979,449,296,957,259,521,327,351,286,146,15,405,946,695,281,628,86,409,565,745,536,809,457,542,890,135,375,701,849,733,23,688,266,482,181,975,482,244,951,107,718,541,24,179,968,393,925,808,211,67,949,369,507,234,745,182,838,958,685,242,169,38,101,688,430,331,389,279,21,3,50,462,496,278,981,470,824,520,988,274,751,753,664,298,882,983,190,571,215,593,443,406,816,827,535,53,275,912,856,494,170,824,867,904,123,414,433,225,23,610,878,383,871,566,178,587,529,48,164,443,889,460,702,246,178,74,40,240,216,961,644,130,291,987,180,959,996,567,171,219,441,882,861,705,242,150,192,975,485,739,342,896,460,232,120,177,626,319,629,242,279,258,257,945,879,751,88,340,420,440,530,974,919,442,451,253,137,771,389,531,306,921,314,458,294,960,359,142,771,594,568,53,49,517,978,831,795,353,488,19,321,406,670,958,507,319,887,783,530,846,591,739,524,587,88,519,900,434,45,553,621,543,877,408,378,723,648,531,296,933,303,726,766,93,899,622,402,691,300,749,388,569,935,497,969,119,32,606,867,876,173,57,16,249,996,315,597,778,563,110,517,620,450,414,345,644,563,690,26,738,60,977,855,703,847,901,247,68,649,353,787,796,672,240,317,34,926,997,610,780,190,252,825,52,278,72,91,324,629,935,703,482,547,971,910,231,389,722,878,715,142,441,559,842,782,756,756,267,539,720,762,546,696,781,483,619,18,329,571,571,365,560,407,204,531,362,594,907,702,521,419,446,569,198,750,621,588,345,118,791,852,52,625,552,291,528,917,105,472,371,864,316,953,751,349,34,83,796,484,972,214,878,553,388,552,455,141,172,74,804,1000,985,305,450,978,836,35,389,217,667,838,860,331,2,12,846,81,705,820,699,255,828,666,910,316,141,563,714,301,849,255,772,774,13,592,763,746,454,942,892,842,236,371,963,759,184,946,937,685,328,965,552,605,813,231,97,440,7,405,955,360,347,532,266,558,62,580,627,397,149,185,412,233,595,394,497,517,807,58,349,47,435,221,320,860,745,276,475,155,106,523,889,483,537,492,503,914,421,333,807,648,113,637,735,533,448,74,472,267,559,965,300,911,230,282,251,901,112,336,23,54,774,385,582,748,919,286,683,633,480,356,711,19,99,765,699,323,881,704,28,785,562,532,526,251,933,640,649,755,876,256,357,858,283,881,956,915,688,300,645,397,58,85,700,412,310,948,830,909,144,855,622,147,967,157,502,252,337,258,353,541,813,255,504,281,219,141,213,927,62,779,594,649,587,541,214,446,688,963,794,926,336,88,879,417,366,731,889,555,512,92,23,652,461,786,789,492,91,852,293,667,999,632,553,27,831,932,195,631,762,549,143,358,641,976,383,73,526,802,105,627,131,713,953,488,93,611,165,914,898,235,56,878,962,44,663,112,797,108,902,180,82,104,210,401,241,926,715,700,51,338,409,112,73,220,668,91,190,452,446,440,608,643,900,641,563,99,326,895,17,942,661,664,514,839,727,87,475,550,398,138,195,594,675,416,926,617,295,291,730,295,266,193,721,259,892,774,780,183,202,613,952,710,175,424,222,421,914,713,236,51,964,926,673,959,665,514,924,320,722,927,516,179,282,969,816,514,196,26,247,416,321,226,602,738,51,532,469,118,688,52,997,756,380,91,400,943,663,254,157,447,821,117,539,688,956,898,463,232,265,429,115,808,794,424,86,682,539,350,762,42,78,103,778,88,481,887,934,335,383,112,205,776,620,108,966,256,60,333,359,870,544,179,344,580,372,395,437,869,710,118,126,702,230,659,823,948,70,692,553,960,230,209,78,694,381,167,788,397,169,434,605,958,965,656,322,391,67,881,561,409,91,136,460,541,310,360,994,349,229,850,252,28,984,446,743,794,31,855,791,659,412,406,428,204,100,826,645,437,731,506,508,941,350,284,520,412,951,547,583,808,228,852,288,160,92,136,490,6,716,659,803,284,191,248,750,497,765,556,715,849,776,797,216,34,35,437,939,75,756,983,662,677,584,498,142,106,292,776,771,813,797,771,422,148,484,607,568,626,496,670,309,895,523,65,828,580,229,585,6,587,949,637,924,779,71,596,654,417,674,690,58,342,101,553,808,632,753,442,351,496,623,508,392,803,610,871,802,391,830,389,821,504,950,315,691,24,172,915,51,657,495,36,680,21,403,690,264,863,709,977,300,641,383,656,686,660,994,941,915,723,868,60,646,987,453,53,264,776,113,1000,925,622,788,16,565,243,611,226,910,935,229,432,271,228,382,366,496,900,610,867,697,894,95,690,957,258,416,598,577,710,124,377,344,779,746,654,898,261,582,476,505,284,105,778,142,716,25,181,666,25,762,508,568,53,167,38,140,72,486,585,544,715,802,152,52,890,377,830,772,504,603,923,999,872,390,673,703,958,453,244,761,152,409,344,166,838,973,333,56,146,382,348,709,237,119,489,4,601,941,394,961,968,710,848,308,296,745,838,330,446,589,878,783,888,634,770,166,68,186,512,678,704,492,891,874,457,14,575,396,579,679,810,148,318,63,983,535,269,202,716,365,511,145,473,106,971,694,150,26,404,179,467,906,579,884,582,78,500,595,934,504,602,712,332,48,188,656,399,491,975,123,569,516,662,85,164,526,485,292,804,754,969,877,957,433,987,519,980,656,109,613,769,308,694,163,229,736,579,928,860,795,743,956,81,955,128,709,196,570,2,182,982,537,468,328,29,561,223,125,906,925,376,654,300,587,151,481,508,350,914,771,310,705,914,68,454,392,818,765,77,66,681,481,636,496,191,148,550,883,123,846,871,327,595,501,160,477,725,947,231,14,417,704,682,790,301,355,530,408,14,345,634,129,606,832,986,837,175,727,237,27,10,696,353,417,674,876,923,612,651,975,735,721,823,25,603,705,720,138,706,708,6,838,636,24,808,542,687,610,186,410,971,958,456,61,310,301,739,152,942,98,814,68,343,987,70,691,196,108,661,780,855,657,165,548,493,578,335,614,340,709,583,714,341,822,534,581,66,578,572,757,862,635,521,616,508,41,237,678,144,540,686,529,867,965,419,313,691,238,809,519,916,811,383,444,538,459,782,609,258,548,928,11,304,900,495,812,877,367,369,280,198,333,853,189,62,355,224,357,736,651,238,267,521,79,622,934,980,741,262,585,708,243,950,17,803,536,20,752,54,750,968,51,507,818,129,423,467,460,150,253,593,214,581,107,260,637,665,153,846,84,885,952,691,160,32,979,190,79,641,183,77,977,30,91,97,546,119,69,629,224,463,237,71,128,359,593,862,735,609,920,143,839,139,512,489,644,849,253,823,769,444,832,493,616,729,266,527,932,631,751,303,538,866,292,679,280,427,998,419,340,871,314,197,283,509,444,218,712,204,554,412,191,611,300,791,152,304,351,98,912,583,338,313,483,300,493,72,684,869,804,817,947,965,751,997,398,952,617,777,562,764,494,215,459,73,362,902,866,526,228,912,597,326,475,492,97,278,499,135,393,639,994,841,537,545,720,714,841,224,26,258,877,910,961,1000,901,219,321,636,385,161,627,227,85,149,408,564,301,574,719,618,685,392,813,718,40,273,592,346,105,379,550,779,171,662,234,177,953,820,997,874,923,941,269,436,808,162,884,236,972,682,689,175,473,461,872,970,186,548,647,363,107,971,164,279,724,232,676,972,611,980,536,153,286,250,774,542,294,932,215,532,194,377,647,388,302,941,112,716,757,783,843,199,70,2,26,67,170,160,406,631,430,88,217,400,650,263,850,718,304,690,323,543,8,806,696,612,800,105,874,36,876,484,408,826,738,946,811,15,556,927,474,39,202,178,22,584,577,340,273,470,403,259,419,777,428,430,143,109,892,357,905,75,177,39,58,375,222,646,855,680,563,38,801,830,189,635,238,879,670,278,352,412,960,3,443,271,762,502,740,853,919,614,544,548,804,948,390,268,448,857,136,465,608,32,811,70,164,631,889,965,628,176,482,258,970,330,848,828,654,474,658,493,105,947,99,10,534,910,232,648,865,358,114,58,349,160,818,294,445,577,952,719,236,589,748,704,944,160,175,113,214,10,617,303,917,323,800,354,590,642,476,393,636,19,169,848,583,892,749,155,651,893,1000,197,141,408,885,652,358,927,114,496,871,981,847,932,982,165,266,539,404,673,806,657,619,668,780,248,618,776,874,434,103,490,7,763,947,191,123,791,235,231,755,414,33,10,757,683,834,820,377,827,611,595,18,7,576,122,525,455,820,994,76,924,719,531,618,238,197,508,148,362,144,774,774,393,552,582,82,54,707,52,591,897,751,148,835,315], 166),
]

for i, (nums, ans) in enumerate(tests):
    res = sol.distinctPrimeFactors(nums)
    if res == ans:
        print(f'Test {i}: PASS')
    else:
        print(f'Test {i}; Fail. Ans: {ans}, Res: {res}')
