# from pudb import set_trace; set_trace()
from typing import List


class Solution1:
    def subStrHash(self, s: str, power: int, modulo: int, k: int, hashValue: int) -> str:
        """Important lesson: DO NOT use ** for power, because it is very slow.

        O(N), 8188 ms, 9% ranking. Very very slow.
        """
        sum_ = 0
        largep = 1
        for i in range(k):
            sum_ += (ord(s[i]) - 96) * largep
            largep *= power
        j = 0
        largep //= power
        cache = {i: i * largep for i in range(1, 27)}
        while sum_ % modulo != hashValue and j < len(s) - k:
            j += 1
            sum_ = (sum_ - (ord(s[j - 1]) - 96)) // power + cache[ord(s[j + k - 1]) - 96]
        return s[j:j + k]


class Solution2:
    def subStrHash(self, s: str, power: int, modulo: int, k: int, hashValue: int) -> str:
        """We will handle the hash from right to left, because that way, we
        can avoid division. Division in modulo is complicated. If we go from
        right to left, rolling hash only requires minus and mulitiplication,
        which both has modulo version.

        This is from Lee215
        https://leetcode.com/problems/find-substring-with-given-hash-value/discuss/1730321/JavaC%2B%2BPython-Sliding-Window-%2B-Rolling-Hash

        I suppose this is the correct way to write rolling hash.
        """
        sum_, N = 0, len(s)
        largep = pow(power, k, modulo)
        for i in range(N - 1, -1, -1):
            sum_ = (sum_ * power + ord(s[i]) - 96) % modulo
            if i + k < N:
                sum_ = (sum_ - (ord(s[i + k]) - 96) * largep) % modulo
            if sum_ == hashValue:
                res = i
        return s[res:res + k]



sol = Solution2()
tests = [
    ('leetcode', 7, 20, 2, 0, 'ee'),
    ('fbxzaad', 31, 100, 3, 32, 'fbx'),
    ("qewhvotxijxctihmemjtbxhitjrldvvqovzsrokchwounwacwsnxbkrlkefudxozdduwchfeugcjrlvhctudwdmnbokyfyficbgobrsitapxgizzcqgpyhlytptzfhokmhopbmpqdgwrwunwddssxcbazweyrebkglejntgnpeyfwibtdzsdhhwhperjaouqnfxvjufchbogtreiyyamocytgiszaunnjgoikxjxkwkwzhupqfktskkzvmmswipcsxpiuyhtodrpljbkwwvbehkdrvqurzsnlxfzclmwmpabkhlnwomoigplbiwzqpxeugbclwonxkhvlgtgpuuthkkpkbabmuttmudlypxcvgudcuunaqsgunilwrczpeatvdyxmlphzjltnxyfccjxmblvciytomslsrpidpygwbguxzzulqyhwuojeayaonqhaqjnbecpipzyobhevpuzadjzxfspqeuhfqzkqikbamkajzwwplopqfkrhilhvjffxowbfgtccpvuyrtbarehrwuvzoyxcuzpzhramjsedksnolzomnibrayztwmmoyvouavuqezzerxxswnhhrveughavtjevhgvvwtucubqlbdsnhemwpebroxidpgkbnxkewiovoqwicpgnaqdapbeguzgrolndykcoacbyrnyqgmzobnkllslzefwfhqqcfkfkoiftcfgumsvoavjbcglgeriwechchmoezsayqymazteqpwxikjszfwplnihvuvyyvjcahvpylfuiffutplkvwkyrgzraegboubdqtrtjijisgjhaqkgbbmvzzlkdruxogczwagmxftsesqtwxxplnaiowmpzxukkkgpvgejimfffhzulozmyukbcxklluvfgnhrbvuldiwavzqjgfhtfweyogsznrocusnuuttypwkuefjahearxgymkaeiljvnmxdrypckrzyavqxinwqcghrpixbzpmalihhcliqabjqwfwcgmewrhtafkqvvuwwvfuccyswclhxfbzgdtvnphwqnewehtuqsbaanzmjewyzwecjxnamadqsstqjjedzqiobhzjngszprkzrjyxqnwrgxroktpvumjuootvllnelbpacqjzqetehqtvvawaqslxwkbkigdlbvvqefnzsszdtdkdtgcuebyanikjlultyofyahhtcmvrdyvlevlkooefrgrgaehwnqnlyqpvovkmfkglefrmqeovqcphgzzdaflkoeecoiossmmcnltdlytqvbuurgtjolmwllvraztzgqjaqocudykyvzoyqqalccguysiuzggotypxajxcwwqekvudlasbwppzitnhuigebrpawyziieepsrclxuhzacsliwmijdzpdpmkfpvybeqkcquixtwcqiuspehcdoyuhfwcmcctdpebgibenfenxlwejxuoabypwwnvjpurzsgmloregohjmxlobbqkxntwidoeabvkjjotbjxixosmcdpcrnltvzuhnxnrzhxxzpzbtqdulqrhqfjlkwgtyzqonwxveehwrxbrjfijszzvxwxooetexntoprvhfkifoqkqilgkcbbuhirjmqkgkqhbqysouadvuodczczgfbkgpkpwixnxseeefnskbpcbmwkszlnvmwgemgyycthztibjrvgtarumxplvcwilbijxssybggrbigwpuvjiiadprsvsisdlwdtlxoyofnszyohilngtxogwiisewytobrotskefuykmlgpyyhjpkhigsewfuoptcnscblbldixxaoexlqgplrvqruyqfgcnqwzjxgrzfuxpmiejertazgxzcrejtirdtsonaqmtgeyindijhbkujsdlcikvvitwhqsrhfdwqrmkgpaybsgvoqsnssznhmqxpdcwzyrqjvklotwfoqqotxoefzdntzvdcjxcbrzxtkkaqehfodvandtdipjlnrbmxwyprhgmxuucftovdvwkihvswutawuvucepnvgxayswzqtykrdszpivmlxmylmjedrxzyubtuinvaltzfbcwjfiztbikefwbhajaatygotbbvtvvdbjbkritjbrnillvpgjxjlapkwwgieodalhtfftiqziaqamvpbymgyrknpeqoyzsvpiparhvmglejtkijgczysejnoyqqkzjwyooynxmtniyzuryyddjlqovdpwsertmqhdhffuontnqdmpvfuifkonlipowezacfchcpormwvgfzvhkvxczwoumkcnlstmbfyrbqgjwpzmhgeqljynszhyegzdgcpzzqouzbwqhxudkznrixssamcacjvzqlrfswrtaeotsqgxzgfvcyoanaymfpegqhtghrzwtgtsqrcqjqllazebuairlhupjbmqesizjwyzxnypopmcluweuuotnegrwiiqffkqwjpnvbuallzukgycjfhcyyqijtgfivpywlwmuazpdkiayjgktrstlpvemedqhmzicrtedvamnoemeejcceosivedbduruomdfcxfnxskriyjsznrwiyrlhbhspuepgpygpgijnumrakoizeddaoennnssuushtaprrwcmchyywgwyqzgxehipxdwrdfhtycjcvvufpaxebhjewgtfdzykozwhykbjusgeqoymbbgjvvznvhexlcwcglgtqnnrcyypcagngazzvpppxittkjerprwipjfswxzzygmxvvhcmekvtxtmgdcpfalcnncmfxqjpzsgtkvqpmxepsedgftdfhaeyqnigpmxqecwkxoavvxqttwpcecvftcwpzhtwkzguaecelrwttbhiripzlxewpwejxxrwfxqfpjytqojgyirlcrdewrpbqxctxuikgpzoxhgkvwdmadijmqmyegqlzodpzonhdhcacturzpcrlsssecpmfyxpuzrwtrvjlllykdrktegvilfjpnavxdrpsrwsmkcgsdvvhvkhczivgyptshnvisrwcltdhdfwufcjysbqrgrtqazsmoosasmgakkjozfknuwxqlzmkgjaizbrqakoibunekuyomzvfddwazozbflaqyphwmchicxmuyhmbekqcnqdcqnwbateyskxvkwcrybxisdyygqltguupwpeoqdrpvuioktuynkqppgkzujnogxqimzhzvpjspjrwmyeqreixuduipksqzvrsmnxnqvyecwtfsvdbpcybdecjdjuoxiroxnsnkgriwjbutqriowzvjywjzhcpqfbxokrmqhzdfcnejwdsevqantcflqlhlvydjjcfmpukwluskwnsqoxtxnhhuvofyhpwbzpamxgayshdzsjryzvxoxzpdeobqiyusbujadugxxowkhvpgwffeyvxqwahugitkjrhfhbimzvdlmrbygjshazxpzunfckenalaipidnronhypkfxzjtbmnwqqqbhpswpdalggwwrhgrmgwywsseevjjkaqkkehrplfzhshwhgpsiqfalbdohwdxfooxlqqfsovlmupvjyhcdxucgejxbubyasqaictoqjyabiunweipiekheiqobrwrmzezyswatdpxdcieyvguikxewoekhtkhqybynojncujmdaiulkfpwzqlnpvdtbrsvsbcddagtavjulxwpstlqtplqtustzjzoexrisclwldyoyamwwpjzyvmbrwdjyiubzysvxnnrhupflqxqvqjnqbonubjmfeccoijovxfzpouyukrccsrkvendggkdgonldstmedihwirvbkgonuojaboufkbqmolhgfewsdlfvpilgzljtrgfkqzmxdxysfmkvvtcjuyasqmzuopxbasgaabpagkmdfkyuzktpbcrttgtwtatcksttojwvnelgjjffaijnakabtaendzvmlkjtrsekigopnyrugksfluxkyojayopfacnywgwypzndwmsxhlmpusirgawkeivjbgkiyanaigjtixlpdxblwkapqauircaibydbrbfeqcynsduabybmbvgglqozuzajqkjervqnqmfvsqzzbrgotwxcgyqlnvjqacfjvtmnsrdflstniwzsvikwihyjflhpjewczhxyiedtdwvyxhwngeqgvlasoyltduzixkxgqkonxurpztgwktfwbrsxwowtrecqeyguiobttcvthrlascxdgccwldxpnseikrobujpuplbpoystfkjanjzyzjyjkndhtpgqdrptwubjjlnihfzjoztjljtiiparfkjnacruzxkevtwrzrxnpcfkpbibebonugichzhifawdckvqmwgajyhybjlvftmrcmagvhviudnphbmattgkrapuiwhzizpotbgbxkbzqcnfnytuuuwydldkvbhxvghvzrumzwzmcuplsaoyeyiilzcivupvwzytsfinyixqviokxpdszqsdxmrxwesyzbboxkihygkjlzqritosouwkhbaykqqyywcgproaspjyftkuyeyajgdmladuvtijqnwjqvnwcmdxrqrptibilmvmozpxdxmcqtknxkfytsvlvexmpsbrnyajmroyrclkjkskndypmtjgkycwneurltisbouakcaqcnijlgnduaqrftgnocdvsdahbtyybcaizbzkccdtmolfpzdbkmtdjldkkztmfehadmugxiyyrvexdcchkkokhjnikzayzjyafanmazquhwhcnnncszzrycwalbkszmvoogzynqmhybqcibofulxxwxpavmnxnlxixqtljmzimavcfcnfqfcemmtmssadrxwbptvxhrpjvyikypogvwgxpgqygvufapplbwcrmphcnxtnkwezhzkjgxykhcpdehixdxhctsxkxbbtlwsmmiuzplzyxdymhruxabzwvffsqwriujszwxythotbamldolarqsjeyndlvmaddiwsjwjcelwfnmpfpuamjhoxmhquleeuewonatdkslawenazzirrwxvytcbaqjuipzcittqkhsxppednfxnlcumjksxwndtpvnwcrlldvprqpmmtremknkiemplxdjnyuofxduqifefdedtxyuxgqvwlvzegmiyifmemyrkfnizkmrzbcgsmwgwbjzjaqvzzgnmpusgtlxpydzohpmepdpcrouwjhhcuyasipzuoabiiixpzmfskommqhheqlnyhxwiwmkeqotyiixsswvpqdjqncqndmlofewyqruvbqoqdrlzbnrvphsomrpyvhxhimggagaqfyaxomeqqlidzxagpuuewaxbuafycvomlyxjdbammxourcoyvgvldtyhgfqjdmqpnldmcdyjvcuelfmnsefhlfzimgbwhuleriejkoecjlkycdwwbjcclucqalskyzeimoamjnsbrlajnsjcuwwmejpldtpafeuehkztrysvezxjturogmtbcrviixjlthrpajesoaalhoztiararvljqztouotvmilpxtqntbfznmffawnpphzrdsoaetdjeikapgfamhjowtlwndntsrtpnirrxlsrdimnqqjvowowarmxhqqaqywqkesiwqotfrhlbofotzenjddglbdwaxffwipmzzbkpdclencmetifwsogjrpdhlginuldfxulexgljynrinbdctbvosdwqtflxhnizejkzpaojoofxpgijycnzbjypjkjnjdbywvfxafgxcnqhxmimmfsnlsfqlqiiwlzyfnbvkhgzmeoalqyoidmuzenelpfqzksfggmebewnxhfpmbcjguhgnmeetlbnstonpvkbtxkbtefmhkklsqhdrbuupqnnufdxzkiqeggykixxswabsftobycxpiothsagyddlbdqjpfzirnxurgonzowoitowvucqrzcxsyzyqicrvgfmfznakqmtxmgmsltgjlrglatxviwxvjzyhrstshljhcsoegzaiuvvmhvqskfrgvzeycgxnxatannwxalayyekdshyhqphprzcwaeiegvqbdfgyryonqkfnmfohdfbmdqxwbngwljpuxppqaljxcwzujzffyaqdiqlvzzalxfpeghftzmquqtzxyevbjrglucchmrnezjasicdnwgsnjlnubcizcyjxwxkvtbgovjsohtjfdfazyplhtusdiccnnoqcrifsakclhrbuokivielxxttjzblecdsgwfofvnnhixtuzoutgwkzjctvluzvvbhvzcrwqgmdpytalfiyvixewxetyqrptmeapkapwnpiopcyjvanumxwcdgxjroywvslcwcqchemzmhfnvkaopyeankzaouduyetiowhdfgjyjivxpenfgtxzbrdhayuyqykgqwcewsqnaiuezalcjgnpslguefwvsadctchatvfsjistemqllniihsoacjqwgpctziphsybaxhazdslpjvvpullcqouyalcehvapsplyfkzhyuniqxhfgvhxafovuuoiqfgovqsxelghpkvdfrgqhuwzxormatkivzbqvqcyviinycymmnnthdenwjqzzrkjmvvkoxhseeskapndecgbggsoglwzvtgkvornfpcfpvpjidrskaozwebgyqpekhdxemkvrogzxsweafkplnaapffhulcwilcfeqreciqekunqqiegbbbscpdlcvlcqfrnfhvqqwezssdezndidmmxsfcgdmgesmxxisaoiwzksxgamkzmycopiqmoxavesekctiwnpjbfrxbiqihgtvhlptgzsynjnymczfbemopcblmeozbjtmmlcvavkxthycigktuxixlxvrlholkuhijlmoqzblmhglvmcxpdkimluhwdbnqatxiqdanavutsnvoxthztpxanoptezjtwxxzgbhdvlkyvugjjawvdutzrtnbzzqboiwucpvrcfmkogbmdtbiomykkvrwjquhwohfurzytubnnfvnebxd", 38894, 73463, 3098, 3671, 'zhshwhgpsiqfalbdohwdxfooxlqqfsovlmupvjyhcdxucgejxbubyasqaictoqjyabiunweipiekheiqobrwrmzezyswatdpxdcieyvguikxewoekhtkhqybynojncujmdaiulkfpwzqlnpvdtbrsvsbcddagtavjulxwpstlqtplqtustzjzoexrisclwldyoyamwwpjzyvmbrwdjyiubzysvxnnrhupflqxqvqjnqbonubjmfeccoijovxfzpouyukrccsrkvendggkdgonldstmedihwirvbkgonuojaboufkbqmolhgfewsdlfvpilgzljtrgfkqzmxdxysfmkvvtcjuyasqmzuopxbasgaabpagkmdfkyuzktpbcrttgtwtatcksttojwvnelgjjffaijnakabtaendzvmlkjtrsekigopnyrugksfluxkyojayopfacnywgwypzndwmsxhlmpusirgawkeivjbgkiyanaigjtixlpdxblwkapqauircaibydbrbfeqcynsduabybmbvgglqozuzajqkjervqnqmfvsqzzbrgotwxcgyqlnvjqacfjvtmnsrdflstniwzsvikwihyjflhpjewczhxyiedtdwvyxhwngeqgvlasoyltduzixkxgqkonxurpztgwktfwbrsxwowtrecqeyguiobttcvthrlascxdgccwldxpnseikrobujpuplbpoystfkjanjzyzjyjkndhtpgqdrptwubjjlnihfzjoztjljtiiparfkjnacruzxkevtwrzrxnpcfkpbibebonugichzhifawdckvqmwgajyhybjlvftmrcmagvhviudnphbmattgkrapuiwhzizpotbgbxkbzqcnfnytuuuwydldkvbhxvghvzrumzwzmcuplsaoyeyiilzcivupvwzytsfinyixqviokxpdszqsdxmrxwesyzbboxkihygkjlzqritosouwkhbaykqqyywcgproaspjyftkuyeyajgdmladuvtijqnwjqvnwcmdxrqrptibilmvmozpxdxmcqtknxkfytsvlvexmpsbrnyajmroyrclkjkskndypmtjgkycwneurltisbouakcaqcnijlgnduaqrftgnocdvsdahbtyybcaizbzkccdtmolfpzdbkmtdjldkkztmfehadmugxiyyrvexdcchkkokhjnikzayzjyafanmazquhwhcnnncszzrycwalbkszmvoogzynqmhybqcibofulxxwxpavmnxnlxixqtljmzimavcfcnfqfcemmtmssadrxwbptvxhrpjvyikypogvwgxpgqygvufapplbwcrmphcnxtnkwezhzkjgxykhcpdehixdxhctsxkxbbtlwsmmiuzplzyxdymhruxabzwvffsqwriujszwxythotbamldolarqsjeyndlvmaddiwsjwjcelwfnmpfpuamjhoxmhquleeuewonatdkslawenazzirrwxvytcbaqjuipzcittqkhsxppednfxnlcumjksxwndtpvnwcrlldvprqpmmtremknkiemplxdjnyuofxduqifefdedtxyuxgqvwlvzegmiyifmemyrkfnizkmrzbcgsmwgwbjzjaqvzzgnmpusgtlxpydzohpmepdpcrouwjhhcuyasipzuoabiiixpzmfskommqhheqlnyhxwiwmkeqotyiixsswvpqdjqncqndmlofewyqruvbqoqdrlzbnrvphsomrpyvhxhimggagaqfyaxomeqqlidzxagpuuewaxbuafycvomlyxjdbammxourcoyvgvldtyhgfqjdmqpnldmcdyjvcuelfmnsefhlfzimgbwhuleriejkoecjlkycdwwbjcclucqalskyzeimoamjnsbrlajnsjcuwwmejpldtpafeuehkztrysvezxjturogmtbcrviixjlthrpajesoaalhoztiararvljqztouotvmilpxtqntbfznmffawnpphzrdsoaetdjeikapgfamhjowtlwndntsrtpnirrxlsrdimnqqjvowowarmxhqqaqywqkesiwqotfrhlbofotzenjddglbdwaxffwipmzzbkpdclencmetifwsogjrpdhlginuldfxulexgljynrinbdctbvosdwqtflxhnizejkzpaojoofxpgijycnzbjypjkjnjdbywvfxafgxcnqhxmimmfsnlsfqlqiiwlzyfnbvkhgzmeoalqyoidmuzenelpfqzksfggmebewnxhfpmbcjguhgnmeetlbnstonpvkbtxkbtefmhkklsqhdrbuupqnnufdxzkiqeggykixxswabsftobycxpiothsagyddlbdqjpfzirnxurgonzowoitowvucqrzcxsyzyqicrvgfmfznakqmtxmgmsltgjlrglatxviwxvjzyhrstshljhcsoegzaiuvvmhvqskfrgvzeycgxnxatannwxalayyekdshyhqphprzcwaeiegvqbdfgyryonqkfnmfohdfbmdqxwbngwljpuxppqaljxcwzujzffyaqdiqlvzzalxfpeghftzmquqtzxyevbjrglucchmrnezjasicdnwgsnjlnubcizcyjxwxkvtbgovjsohtjfdfazyplhtusdiccnnoqcrifsakclhrbuokivielxxttjzblecdsgwfofvnnhixtuzoutgwkzjctvluzvvbhvzcrwqgmdpytalfiyvixewxetyqrptmeapkapwnpiopcyjvanumxwcdgxjroywvslcwcqchemzmhfnvkaopyeankzaouduyetiowhdfgjyjivxpenfgtxzbrdhayuyqykgqwcewsqnaiuezalcjgnpslguefwvsadctchatvfsjistemqllniihsoacjqwgpctziphsybaxhazdslpjvvpullcqouyalcehvapsplyfkzhyuniqxhfgvhxafovuuoiqfgovqsxelghpkvdfrgqhuwzxormatkivzbqvqcyviinycymmnnthdenwjqzzrkjmvvkoxhseeskapndecgbg'),
    ("puomfovzgiymqhxprfxqjzjzzzlggsrpgbrwrwlslbdpjzudtczaovcytefpqmkesqwgxluxog", 13, 8, 69, 7, "fovzgiymqhxprfxqjzjzzzlggsrpgbrwrwlslbdpjzudtczaovcytefpqmkesqwgxluxo"),
]

for i, (s, power, modulo, k, hashValue, ans) in enumerate(tests):
    res = sol.subStrHash(s, power, modulo, k, hashValue)
    if sorted(res) == sorted(ans):
        print(f'Test {i}: PASS')
    else:
        print(f'Test {i}; Fail. Ans: {ans}, Res: {res}')
