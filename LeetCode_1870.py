# from pudb import set_trace; set_trace()
from typing import List
import math


class Solution1:
    def minSpeedOnTime(self, dist: List[int], hour: float) -> int:
        """This is an interesting problem. The key insight is binary search.
        But to arrive at the boundaries of binary search, we need to do a bit
        pre-processing.

        First of all, we know the lower bound of time. If we travel at light
        speed, then the entire journey cannot be shorter than N - 1 hours. This
        means if the target hour is smaller or equal to N - 1, that is
        impossible.

        Then we can pick the smallest large speed that enables us to take at
        most 1 hour for all trips except the last one. This speed is max(dist).
        Then we can use this speed to compute the total travel time. If it is
        larger than the target hour, that means we must travel faster than
        max(dist). Since traveling faster than max(dist) does not change the
        time spent on all the other distances except from the last one, we can
        find the desired speed directly by analyzing the requirement on the last
        trip.

        Otherwise, if max(dist) results in a time smaller than the target hour,
        then the desired speed must be between 0 and max(dist). For that, we
        use binary search.

        Two tricky parts.

        1. I use math.isclose to compare floating numbers.
        2. During binary search, the computation of the total hours taken is
        different for the last distance compared to all the previous ones. The
        previous ones use math.ceil, but the last one has to compute the actual
        floating number.

        O(NlogM), where N is the length of dist, M = max(dist).
        2292 ms, 93% ranking.
        """
        N = len(dist)
        if hour <= N - 1:
            return -1
        lo, hi = 0, max(dist)
        if N - 1 + dist[-1] / hi > hour:
            target = hour - N + 1
            pot = int(dist[-1] / target)
            actual = dist[-1] / pot
            return pot if actual > target or math.isclose(actual, target) else pot + 1
        while lo < hi:
            mid = (lo + hi) // 2
            if mid == 0 or sum(math.ceil(d / mid) for d in dist[:-1]) + dist[-1] / mid > hour:
                lo = mid + 1
            else:
                hi = mid
        return lo


class Solution2:
    def minSpeedOnTime(self, dist: List[int], hour: float) -> int:
        """Binary search but with a real high bound. Since dist[i] <= 10^5, and
        hour only keeps 2 decimal points. Thus, the high bound for speed is
        10^5 / 0.01 = 10^7. Thus, we can start from 10^7 and not worry about the
        special case that involves math.isclose.

        It's not as fast because we do not preprocess the case when speed is
        larger than max(dist), but the algo is simpler and we don't have to use
        math.isclose. 3188 ms, 84% ranking.
        """
        N = len(dist)
        if hour <= N - 1:
            return -1
        lo, hi = 0, 10**7
        while lo < hi:
            mid = (lo + hi) // 2
            if mid == 0 or sum(math.ceil(d / mid) for d in dist[:-1]) + dist[-1] / mid > hour:
                lo = mid + 1
            else:
                hi = mid
        return lo


sol = Solution2()
tests = [
    ([1, 3, 2], 6, 1),
    ([1, 3, 2], 2.7, 3),
    ([1, 3, 2], 1.9, -1),
    ([1, 1, 100000], 2.01, 10000000),
    ([80,741,333,812,495,178,500,846,921,707,720,591,840,930,98,610,658,308,39,749,828,591,391,81,799,58,944,790,343,357,901,837,445,427,953,889,124,891,789,233,766,669,870,617,951,12,650,797,648,392,56,313,537,43,327,553,579,154,335,515,715,227,157,52,690,750,403,995,457,771,610,590,517,93,228,443,297,806,404,152,136,345,85,488,586,764,51,562,409,269,88,409,514,445,793,715,134,781,139,493,573,203,500,405,668,586,201,575,631,754,537,253,249,74,273,796,441,332,702,947,590,92,116,688,424,434,375,357,196,329,353,609,672,25,789,313,174,359,632,842,823,453,639,150,452,46,947,838,240,205,702,383,160,776,746,874,88,116,758,56,249,972,636,949,152,890,853,840,295,15,352,711,824,114,313,461,483,24,340,215,758,551,217,209,560,536,769,265,562,495,638,748,145,712,716,685,19,386,597,928,680,540,45,262,175,62,291,206,809,714,633,278,55,477,671,968,9,69,398,677,278,679,873,935,676,369,886,111,20,300,889,905,665,396,237,390,521,727,102,926,324,497,888,612,545,91,191,204,513,990,469,575,949,730,23,41,254,945,543,313,342,502,403,763,161,19,356,701,361,364,641,310,242,514,283,832,64,641,264,900,397,912,835,31,967,569,972,287,231,156,350,919,403,673,141,90,748,392,534,984,695,628,894,641,703,233,428,247,587,157,437,994,320,932,620,338,460,556,135,212,669,142,595,555,701,820,208,884,142,317,706,723,921,537,932,139,441,931,1000,789,149,672,956,579,940,162,326,70,571,546,972,737,122,189,326,860,901,150,745,31,784,327,902,997,424,985,422,311,454,764,957,842,916,653,956,757,281,156,798,193,110,135,190,27,781,627,632,274,621,581,628,237,611,238,237,704,27,368,82,705,799,489,138,515,867,620,481,730,666,383,189,873,397,504,486,141,168,198,232,34,419,783,993,16,948,277,974,423,228,761,688,208,776,210,68,182,950,978,450,888,632,502,705,333,888,469,909,253,438,415,795,43,623,753,845,390,738,321,404,627,962,761,586,609,550,538,657,897,722,806,40,534,112,463,468,847,899,44,899,252,532,551,406,753,41,572,397,529,784,646,986,51,195,299,451,408,906,312,793,848,293,473,171,433,302,628,942,56,707,530,926,146,475,850,662,463,93,740,513,116,185,798,600,961,916,713,560,139,403,424,332,462,26,184,465,605,919,730,918,207,904,466,93,257,332,709,665,929,729,816,168,736,751,127,94,117,724,461,650,372,88,537,725,394,745,811,999,524,627,973,164,388,564,390,45,787,175,935,344,580,893,676,884,154,167,890,149,184,788,730,53,430,316,317,748,788,985,457,296,642,186,121,921,135,984,208,4,638,784,260,13,470,510,876,511,557,827,6,623,904,506,244,223,603,676,488,465,420,453,82,616,615,7,251,904,561,285,635,644,571,840,846,213,51,190,152,57,669,358,38,149,875,34,684,592,859,618,306,340,943,90,51,112,427,183,166,689,292,626,677,709,717,610,587,807,576,182,990,467,768,593,369,954,37,96,787,307,331,378,920,389,840,70,777,438,864,564,67,300,483,138,125,712,881,282,338,540,424,538,215,713,215,627,60,112,586,748,645,542,90,496,742,706,620,957,808,724,295,438,624,869,325,266,539,589,639,363,950,133,630,577,509,533,747,648,510,505,828,185,905,625,239,726,298,199,2,122,25,477,641,816,121,756,869,213,819,631,425,424,47,342,359,574,826,653,218,12,656,207,707,289,261,810,70,316,308,519,564,332,786,7,117,703,342,350,406,742,583,631,984,30,853,180,199,339,854,347,945,689,491,939,486,817,37,662,140,494,160,643,472,914,886,550,918,344,474,803,834,424,951,761,58,856,534,307,579,743,695,324,569,549,20,214,592,702,340,819,939,910,815,363,68,993,153,288,861,32,348,385,642,548,863,170,585,621,399,192,610,120,886,802,770,316,723,879,323,727,33,279,424,89,509,899,244,381,463,850,974,310,222,538,310,180,115,384,804,39,797,207,936,95,455,519,26,819,495,927,513,158,195,349,946,496,751,895,537,318,795,336,147,788,893,101,842,961,529,693,136,211,742,38,471,397,731,886,535,119,5,319,955,46,704,869,609,893,90,342,479,911,48,106,534,785,675,764,320,24,592,777,320,655,914,215,329,206,198,294,284,546,327,792,452,688,121,280,153,162,281,118,16,982,638,574,527,105,212,556,359,563,327,278,145,966,722,824,291,588,251,176,73,319,628,914,347,554,455,52,134,30,483,925,692,52,109,393,56,89,437,402,184,722,611,913,607,645,857,707,717,457,632,365,320,341,838,203,731,777,687,829,547,81,998,945,774,783,477,582,135,96,833,822,942,716,480,100,467,318,701,660,728,785,477,482,238,971,230,148,882,918,632,265,935,373,402,188,717,940,682,339,808,882,904,333,465,500,31,67,487,116,360,491,473,867,175,290,787,357,619,589,131,521,106,416,838,732,816,110,334,570,666,73,812,310,546,473,411,605,424,245,636,250,562,163,998,494,394,68,349,214,834,711,606,442,804,446,581,807,351,558,711,242,178,679,686,80,758,954,729,588,857,499,118,607,611,475,334,569,100,842,456,181,316,979,416,72,613,112,702,834,611,790,840,389,336,507,661,677,63,93,223,837,143,909,595,925,774,652,830,1,776,151,677,153,464,545,299,400,631,592,458,201,211,698,899,325,307,584,814,936,696,312,941,966,960,446,736,938,353,92,597,9,627,523,414,868,131,873,302,64,379,923,563,992,55,1,721,574,841,368,113,882,289,887,32,241,443,720,605,404,641,326,729,392,416,391,446,559,217,679,178,487,143,193,569,394,864,947,369,861,428,158,296,894,687,129,138,12,74,664,17,148,739,907,499,674,448,999,140,87,141,658,826,426,881,467,916,808,713,619,953,436,639,185,466,522,435,566,840,461,394,364,232,191,435,620,8,592,511,868,749,243,730,514,276,421,949,560,591,376,35,39,582,495,722,378,116,595,494,985,708,82,146,748,749,540,880,769,798,287,477,530,81,536,912,625,91,252,484,646,760,680,984,685,80,701,649,553,818,594,320,628,55,926,352,548,798,12,481,465,525,928,481,588,752,340,432,362,984,818,302,297,172,37,712,946,612,768,312,745,804,578,267,63,645,485,593,174,587,53,673,299,829,756,640,28,294,497,85,130,518,79,872,803,285,259,136,631,288,282,879,264,15,760,115,619,179,932,606,757,155,675,458,379,828,180,268,802,718,242,497,186,819,541,883,34,352,87,991,149,610,957,842,158,858,508,771,423,789,393,244,677,451,744,653,172,216,592,752,863,354,56,658,271,774,840,119,54,172,476,409,488,309,488,765,972,771,945,546,240,389,700,723,400,486,269,149,544,892,446,13,296,950,817,460,392,695,324,985,543,700,979,43,100,940,545,653,363,980,865,443,626,941,668,879,280,344,277,274,822,101,262,671,599,401,473,792,692,768,248,752,689,603,789,200,533,346,694,707,185,321,561,11,689,9,852,70,13,422,101,538,107,702,457,360,225,743,291,258,198,35,25,635,95,59,962,609,673,916,856,223,974,614,654,125,726,981,123,89,877,620,134,385,673,783,922,664,580,823,991,190,918,114,713,189,260,302,479,677,959,78,655,465,945,284,788,438,709,926,684,789,789,332,264,166,800,76,284,796,64,392,398,341,62,265,979,833,272,183,452,72,504,951,206,625,403,183,661,504,112,148,554,788,442,224,629,659,109,935,453,733,266,106,36,75,73,586,746,257,796,457,20,919,510,153,669,656,1,956,39,681,400,273,156,717,338,927,401,589,4,528,725,963,790,503,490,447,414,865,746,800,832,805,72,554,232,4,394,978,706,838,799,494,125,581,549,958,368,342,699,311,411,57,648,982,663,93,375,548,874,984,349,83,862,471,779,785,297,664,208,181,568], 2571.83, 541),
]

for i, (dist, hour, ans) in enumerate(tests):
    res = sol.minSpeedOnTime(dist, hour)
    if res == ans:
        print(f'Test {i}: PASS')
    else:
        print(f'Test {i}; Fail. Ans: {ans}, Res: {res}')
